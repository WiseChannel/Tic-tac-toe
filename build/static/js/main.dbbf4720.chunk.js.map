{"version":3,"sources":["App.jsx","serviceWorker.js","index.js"],"names":["App","props","state","isWiner","s","count","i","line","winnerLine","squares","alert","setTimeout","setState","Array","fill","clickHendler","event","console","log","data","target","getAttribute","currentSquare","Error","error","className","onClick","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2OAwEeA,G,kBApEX,WAAYC,EAAOC,GAAQ,IAAD,8BACtB,4CAAMD,EAAOC,KAiBjBC,QAAU,WAEN,IADA,IAAIC,EAAK,EAAKF,MAAMG,MAAQ,IAAM,EAAK,IAAM,IACpCC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,IAAIC,EAAO,EAAKC,WAAWF,GACvB,EAAKJ,MAAMO,QAAQF,EAAK,MAAQH,GAC7B,EAAKF,MAAMO,QAAQF,EAAK,MAAQH,GAChC,EAAKF,MAAMO,QAAQF,EAAK,MAAQH,IAC/BM,MAAMN,EAAI,OACdO,YAAW,WACP,EAAKC,SAAS,CAAEH,QAASI,MAAM,GAAGC,KAAK,QACvC,EAAKF,SAAS,CAAEP,MAAOQ,MAAM,GAAGC,KAAK,UACtC,QA7BW,EAkC1BC,aAAe,SAACC,GACZC,QAAQC,IAAI,QACZ,IAAIC,EAAOH,EAAMI,OAAOC,aAAa,QACjCC,EAAgB,EAAKpB,MAAMO,QAEH,OAAxBa,EAAcH,IACdG,EAAcH,GAAS,EAAKjB,MAAMG,MAAQ,IAAM,EAAK,IAAM,IAC3D,EAAKO,SAAS,CAAEP,MAAO,EAAKH,MAAMG,MAAQ,IAC1C,EAAKO,SAAS,CAAEH,QAASa,MAEzBZ,MAAM,IAAIa,MAAM,sIAChBN,QAAQO,MAAM,sIAGlB,EAAKrB,WA9CL,EAAKD,MAAQ,CACTO,QAASI,MAAM,GAAGC,KAAK,MACvBT,MAAO,GAEX,EAAKG,WAAa,CACd,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,IAda,E,sEAqDtB,OACI,yBAAKiB,UAAU,eACX,yBAAKA,UAAU,WAAWC,QAASC,KAAKZ,aAAcI,KAAK,KAAKQ,KAAKzB,MAAMO,QAAQ,IACnF,yBAAKgB,UAAU,WAAWC,QAASC,KAAKZ,aAAcI,KAAK,KAAKQ,KAAKzB,MAAMO,QAAQ,IACnF,yBAAKgB,UAAU,WAAWC,QAASC,KAAKZ,aAAcI,KAAK,KAAKQ,KAAKzB,MAAMO,QAAQ,IACnF,yBAAKgB,UAAU,WAAWC,QAASC,KAAKZ,aAAcI,KAAK,KAAKQ,KAAKzB,MAAMO,QAAQ,IACnF,yBAAKgB,UAAU,WAAWC,QAASC,KAAKZ,aAAcI,KAAK,KAAKQ,KAAKzB,MAAMO,QAAQ,IACnF,yBAAKgB,UAAU,WAAWC,QAASC,KAAKZ,aAAcI,KAAK,KAAKQ,KAAKzB,MAAMO,QAAQ,IACnF,yBAAKgB,UAAU,WAAWC,QAASC,KAAKZ,aAAcI,KAAK,KAAKQ,KAAKzB,MAAMO,QAAQ,IACnF,yBAAKgB,UAAU,WAAWC,QAASC,KAAKZ,aAAcI,KAAK,KAAKQ,KAAKzB,MAAMO,QAAQ,IACnF,yBAAKgB,UAAU,WAAWC,QAASC,KAAKZ,aAAcI,KAAK,KAAKQ,KAAKzB,MAAMO,QAAQ,S,GAhEjFmB,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,SD2HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.dbbf4720.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n    constructor(props, state) {\n        super(props, state);\n        this.state = {\n            squares: Array(9).fill(null),\n            count: 0\n        }\n        this.winnerLine = [\n            [0,1,2],\n            [3,4,5],\n            [6,7,8],\n            [0,3,6],\n            [1,4,7],\n            [2,5,8],\n            [0,4,8],\n            [2,4,6]\n        ]\n    }\n\n    isWiner = () => {\n        let s = (this.state.count % 2 === 0) ? 'X' : 'O'; //проверка элемента по клику\n        for (let i = 0; i < 8; i++) {\n            let line = this.winnerLine[i];\n            if (this.state.squares[line[0]] === s\n                && this.state.squares[line[1]] === s\n                && this.state.squares[line[2]] === s ) {\n                    alert(s + 'win')\n                setTimeout(() => {\n                    this.setState({ squares: Array(9).fill(null) });\n                    this.setState({ count: Array(9).fill(null) })\n                }, 3000)\n            }\n        }\n    };\n\n    clickHendler = (event) => {\n        console.log('work');\n        let data = event.target.getAttribute('data'); //номер квадрата по которому кликнули\n        let currentSquare = this.state.squares;\n\n        if (currentSquare[data] === null) {\n            currentSquare[data] = (this.state.count % 2 === 0) ? 'X' : 'O';\n            this.setState({ count: this.state.count + 1 });\n            this.setState({ squares: currentSquare });\n        } else {\n            alert(new Error('Нельзя нажимать два раза'));\n            console.error('Нельзя нажимать два раза')\n        }\n\n        this.isWiner()\n\n    };\n\n    render() {\n        return (\n            <div className='tic-tac-toe'>\n                <div className='ttt-grid' onClick={this.clickHendler} data='0'>{this.state.squares[0]}</div>\n                <div className='ttt-grid' onClick={this.clickHendler} data='1'>{this.state.squares[1]}</div>\n                <div className='ttt-grid' onClick={this.clickHendler} data='2'>{this.state.squares[2]}</div>\n                <div className='ttt-grid' onClick={this.clickHendler} data='3'>{this.state.squares[3]}</div>\n                <div className='ttt-grid' onClick={this.clickHendler} data='4'>{this.state.squares[4]}</div>\n                <div className='ttt-grid' onClick={this.clickHendler} data='5'>{this.state.squares[5]}</div>\n                <div className='ttt-grid' onClick={this.clickHendler} data='6'>{this.state.squares[6]}</div>\n                <div className='ttt-grid' onClick={this.clickHendler} data='7'>{this.state.squares[7]}</div>\n                <div className='ttt-grid' onClick={this.clickHendler} data='8'>{this.state.squares[8]}</div>\n            </div>\n        )\n    }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}